<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[redis入门]]></title>
    <url>%2F2018%2F05%2F17%2Fredis-base%2F</url>
    <content type="text"><![CDATA[注：下面$符号后面跟的都是命令！ 前言空闲时间，充实自己。从零开始重新认识redis。 What is Redis?开源，原子性，速度快。 安装Redis系统环境阿里云服务器 Ubuntu 16.04.3 LTS 安装Redis，基础配置，使用1.安装redis，使用以下命令12$ sudo apt-get update$ sudo apt-get install redis-server ps:安装完成后，通过命令whereis redis找到redis相关文件在哪,通常是在/etc/redis 2.配置，让客户端可以远程访问1$ vim /etc/redis/redis.conf 修改下面两个参数[bind和daemonize]：1234# bind 127.0.0.1 bind 0.0.0.0 # 注释掉`bind 127.0.0.1`这行，加上`bind 0.0.0.0`，让客户端可以远程访问daemonize yes # 修改这一项，no改为yes，让redis在后台运行（以守护进程方式运行）requirepass 123456 # 设置redis密码为：123456 ps:如果不远程访问，可跳过这一步 3.启动Redis直接启动1$ redis-server /etc/redis/redis.conf # 根据配置文件启动某个redis，这里启动默认的，端口为6379 4.查看 redis 是否启动？1$ redis-cli 以上命令将打开以下终端：1redis 127.0.0.1:6379&gt; 上面127.0.0.1 是本机 IP ，6379 是 redis 服务端口。现在我们输入 PING 命令。12redis 127.0.0.1:6379&gt; pingPONG 以上说明我们已经成功安装了redis。 5.关闭Redis123$ ps -ef | grep redis # 查看已启动的redis$ redis-cli -p 6379 -a 123456 shutdown # 通过客户端关闭端口为6379,密码为123456的redis$ kill -9 5311 # 通过杀进程的方式关闭指定redis实例 6.同一台机器启动多个实例redis这里，方便学习，我们创建一个端口号为6380的redis实例。具体操作步骤如下： 12345678$ ps -ef | grep redis # 这里查看redis进程，是没有6380的$ cp /etc/redis/redis.conf /etc/redis/redis_6380.conf$ cd /etc/redis/ $ ll$ vim redis_6380.conf # 修改配置文件，具体修改，参见下面ps部分$ redis-server /etc/redis/redis_6380.conf # 根据端口为6380的redis$ ps -ef | grep redis # 这里查看redis进程，会发现多了一个6380的，说明端口号为6380的redis启动成功$ redis-cli -p 6380 -a 123456 shutdown # 关闭 ps:vim redis_6380.conf:需要修改以下4点 1234port 6380 # Redis监听端口pidfile /var/run/redis/redis-server-6380.pid # 当Redis以守护进程方式运行时，Redis默认会把pid写入/var/run/redis.pid文件，可以通过pidfile指定logfile /var/log/redis/redis-server-6380.log # 日志记录方式dbfilename dump_6380.rdb # 指定本地数据库文件名 附上新建redis实例操作截图： 使用Redis可视化工具远程连接可视化工具：redis desktop managerps:工具自行下载安装，连接。百度就好了，很简单。注意一点，如果设置了redis密码，连接时记得填写Auth项。如下图： 总结一般可视化工具只是拿来查看数据。涉及到redis命令，比如get，set等，还是要自己在终端多敲一下，熟悉起来也更快！]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[xio习Redis]]></title>
    <url>%2F2018%2F05%2F15%2Fxio%E4%B9%A0Redis%2F</url>
    <content type="text"><![CDATA[Redis入门到放弃（使用篇+代码实例） set（有序集合）认识：有序集合 命令：这里参数关键字都比较多，所以下面开始列举的命令， 关键字都使用 大写有序集合中,有key(键)、score（分数）、member（元素）三个参数！其中member为元素，score为member对应的分数。也就是说一个key里面有多个member，一个member又对应了一个score。后面我们根据分数的范围获取集合及其他操作（类似于筛选）。 1、新增元素 ZADD key score member [score member …] 1234567891011127.0.0.1:6379&gt; zadd scoreboard 89 tom(integer) 1 //添加一个127.0.0.1:6379&gt; zadd scoreboard 70 peter 100 david(integer) 2 //添加多个127.0.0.1:6379&gt; zrange scoreboard 0 -1 withscores 1) "peter" //带分数输出2) "70"3) "tom"4) "89"5) "david"6) "100" 2、获得元素的分数ZSCORE key member12127.0.0.1:6379&gt; zscore scoreboard peter"76" 3、获得排名在某个范围的元素列表ZRANGE key start stop [WITHSCORE] ZREVRANGE key start stop [WITHSCORE] ZRANGE命令会按照元素分数的从小到大顺序返回索引从start到stop之间所有的元素（包含两端）。ZRANGE与LRANGE命令相似，索引从0开始，负数一样代表从后向前查找（-1是最后一个）。WITHSCORE代表是否加上分数。 4、获得指定分数范围的元素ZRANGEBYSCORE key min max [WITHSCORES] [LIMIT offset count] 这个命令参数很多，但是都很好理解。这个命令用来获取指定分数范围的元素，min是最小值，max是最大值，WITHSCORE还是和上面介绍的一样，LIMIT是为了指定偏移量及数量的，和sql的有点像。offset是偏移量，count是数量。同时这些min和max都是包含的，如果要想不包含，需要使用“(”符号。 5、增加某个元素的分数ZINCRBY key incremnet member 6、获得集合中元素的数量ZCARD key 这个命令和SCARD类似，也就不多说了。 7、获得指定分数范围的元素个数ZCOUNT key min max 这里就是获得min和max分数之间的元素数，当然这里也支持“(”符号。 8、删除一个或多个元素ZREM key member [member …] 返回值是成功删除的元素的个数。 9、按照排名范围删除元素ZREMRANGEBYRANK key start stop 这个命令按照元素分数从小到大顺序删除指定范围内所有的元素（其实就是先排序，然后按照排好的序列的索引删除），并返回删除的元素的数量。 10、按照分数范围删除元素ZREMRANGEBYSCORE key min max 这里就是直接删除分数范围的元素了，这里分数同样支持“(”符号，返回删除数量。 11、获得元素的排名ZRANK key memberZREVRANK key member ZRANK命令按照元素分数的从小到大的顺序获得制定元素的排名（第一个从0开始），ZREVRANK则相反。 实际应用场景：最后我们举个实际应用的例子。 我们把wordpress的文章按点击率排序，关系数据库我们是遍历所有的文章排序点击数，如果使用Redis，我们需要一个posts:page.view键的有序集合类型，然后每个member为文章ID，score为文章的点击量。这样我们就可以用ZREVRANGE命令获取点击量排行榜。 还有一个实际的例子，我们用有序集合类型保存文章的发布时间（时间用UNIX时间及时间的毫秒数）与文章ID，这样我们可以很方便的按时间来查看文章列表，我们的文章列表应该是用文章发布时间排序而不应该用文章ID排序的。 例子：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110/*** 下面为校验密码输入错误次数 超过设置次数则锁定钱包* @param userId* @param request* @return*/@Overridepublic Map&lt;String, Object&gt; checkInputPWDCount(Integer userId, HttpServletRequest request) &#123; Jedis jedis = RedisPool.getJedis(); try &#123; Map&lt;String, Object&gt; checkMap = getCheckTimeAndCount(jedis); if (null != checkMap) &#123; return checkMap; &#125; String ip = null; // 获取到操作次数 Double phoneScore = jedis.zscore(Rkey.REPEAT_REQUEST_CACHE, String.valueOf(userId)); Long currentTime = System.currentTimeMillis(); if (null != phoneScore &amp;&amp; org.apache.commons.lang3.StringUtils.isNotEmpty(phoneScore.toString())) &#123; Map&lt;String, Object&gt; map = checkInputPWDRepeat(phoneScore, currentTime, jedis, String.valueOf(userId), userId); if (map != null) &#123; return map; &#125; &#125; else &#123; Double score = Double.valueOf(currentTime + "1"); jedis.zadd(Rkey.REPEAT_REQUEST_CACHE, score, String.valueOf(userId)); phoneScore = jedis.zscore(Rkey.REPEAT_REQUEST_CACHE, String.valueOf(userId)); Map&lt;String, Object&gt; map = checkInputPWDRepeat(phoneScore, currentTime, jedis, String.valueOf(userId), userId); if (map != null) &#123; return map; &#125; &#125; //获取IP地址 if (request.getHeader("x-forwarded-for") == null) &#123; ip = request.getRemoteAddr(); &#125; else &#123; ip = request.getHeader("x-forwarded-for"); &#125; if (ip == null) &#123; return null; &#125; //获取缓存数据 Double ipScore = jedis.zscore(Rkey.REPEAT_REQUEST_CACHE, ip); //检测IP if (null != ipScore &amp;&amp; org.apache.commons.lang3.StringUtils.isNotEmpty(ipScore.toString())) &#123; Map&lt;String, Object&gt; map = checkInputPWDRepeat(ipScore, currentTime, jedis, ip, userId); if (map != null) &#123; return map; &#125; &#125; else &#123; Double score = Double.valueOf(currentTime + "1"); jedis.zadd(Rkey.REPEAT_REQUEST_CACHE, score, ip); phoneScore = jedis.zscore(Rkey.REPEAT_REQUEST_CACHE, String.valueOf(userId)); Map&lt;String, Object&gt; map = checkInputPWDRepeat(ipScore, currentTime, jedis, ip, userId); if (map != null) &#123; return map; &#125; &#125; return null; &#125; finally &#123; RedisPool.returnJedis(jedis); &#125;&#125;@Overridepublic Map&lt;String, Object&gt; checkInputPWDRepeat(Double score, Long currentTime, Jedis jedis, String checkStr, Integer userId) &#123; // 限制时间 默认1分钟 Long timeLimit = 60000L; // 限制次数 Integer countLimit = 5; // 读取redis的配置 String x = jedis.get(Rkey.WALLET_LOCK_X); if (!StringUtils.isEmpty(x)) &#123; timeLimit = Long.valueOf(x); &#125; String y = jedis.get(Rkey.WALLET_LOCK_Y); if (!StringUtils.isEmpty(y)) &#123; countLimit = Integer.valueOf(y); &#125; Map&lt;String, Object&gt; returnMap = new HashMap&lt;String, Object&gt;(); String str = String.valueOf(score.longValue()); String previousTime = str.substring(0, 13); Integer requestCount = Integer.valueOf(str.substring(13)); if (currentTime - Long.valueOf(previousTime) &lt; timeLimit &amp;&amp; requestCount &gt;= countLimit) &#123; returnMap.put("errorCode", E.INVALID_REQUEST); returnMap.put("msg", "密码输入次数太频繁，钱包功能已锁定！解锁后可正常使用！"); returnMap.put("keepCount", 0); // 2018/4/18 锁定钱包 updateIsLockByUserId(userId, Boolean.TRUE); return returnMap; &#125; else &#123; if (currentTime - Long.valueOf(previousTime) &gt; timeLimit) &#123; Double newScore = Double.valueOf(currentTime + "1"); jedis.zadd(Rkey.REPEAT_REQUEST_CACHE, newScore, checkStr); &#125; else &#123; jedis.zincrby(Rkey.REPEAT_REQUEST_CACHE, 1, checkStr); long keepCount = countLimit - requestCount; if (keepCount &gt; 0) &#123; returnMap.put("keepCount", keepCount); returnMap.put("errorCode", E.INVALID_REQUEST); returnMap.put("msg", "支付密码错误，还有" + keepCount + "机会"); return returnMap; &#125; &#125; return null; &#125;&#125;]]></content>
      <categories>
        <category>日常杂记</category>
      </categories>
      <tags>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Gogs私服搭建]]></title>
    <url>%2F2018%2F05%2F15%2FGogs%E7%A7%81%E6%9C%8D%E6%90%AD%E5%BB%BA%2F</url>
    <content type="text"><![CDATA[前言空闲时间，使用docker方式，搭建gogs，用来进行项目版本控制。阅读这篇博客时，我假定你之前有过基本的docker使用经验或者至少对docker有着一定的了解。否则，建议你使用这种方式去搭建，传送门：庆爷搭建gogs的心酸历程 What is Gogs?一款极易搭建的自助Git服务，用来进行代码版本控制。 优点：Gogs, 用 docker 跑很方便，外观也漂亮，轻巧简洁，运行快速，几百人使用完全可以满足。 比较：关于私有化git服务，目前了解的有 gitlab，gitblit，gittea 和 Gogs。上家公司用的gitlba，现在公司用的gitblit。gitlab:Gitlab 功能很全，但你需要一个配置足够好的机器来跑，毕竟集成了太多的东西，比较耗内存，慢。自己手动搭建会比较复杂，推荐使用官方的docker image，搭建起来会容易一点。 ps:具体选择要看应用场景，以及服务器的配置等…… 安装gogs您可以通过以下 5 种方式来安装 Gogs： 二进制安装源码安装包管理安装采用 Docker 部署通过 Vagrant 安装我是用的第4种 “采用 Docker 部署”,其他安装方式请点这里1、安装docker。2、安装mysql。3、拉取gogs镜像。4、启动gogs容器5、然后在浏览器中访问http://服务器IP:3000/，就可以打开web安装界面，进行相应的配置，然后，你就可以玩了。 Docker方式安装gogs系统环境阿里云服务器 Ubuntu 16.04.3 LTS 安装Gogs所需环境1.安装nginx1sudo apt-get install nginx 2.安装git1sudo apt-get install git 3.安装MySQL1sudo apt-get install mysql-server 安装mysql会弹出一个框，提示输入数据库密码，这里我输入的123456；输入两次，然后ok，继续安装。 ps:以上3步，你可能会遇到安装失败的情况，可以试试再执行上面的命令前先执行下面一条命令：1sudo apt-get update 4.创建gogs数据库// 安装好了mysql,可以使用Navicat或者其他数据库管理工具连接上数据库，创建一个数据库，数据库名：gogs// 当然也可以直接在服务器上面sql新建，看个人喜爱// 下面是新建数据库的sql命令// 登录数据库mysql -u root -p// 输入数据库密码：123456 进入到mysql命令行界面,执行下面条命令1234567SET GLOBAL storage_engine = 'InnoDB';CREATE DATABASE gogs CHARACTER SET utf8 COLLATE utf8_bin;GRANT ALL PRIVILEGES ON gogs.* TO ‘root’@‘localhost’ IDENTIFIED BY '123456';FLUSH PRIVILEGES;QUIT；// # 123456是你设置的mysql数据库密码 5.安装docker简单方法12sudo apt-get updatesudo apt-get install docker ps:详见:Ubuntu 16.04安装Docker，用centos或者其他系统的请自行百度，确保docker成功安装，再进行下面的步骤。 安装Gogs，配置6.拉取gogs镜像1234docker images # 查看本地拉取了的镜像docker pull mysql # 拉取mysql镜像docker pull gogs/gogs # 拉取gogs镜像docker images # 查看本地拉取了的镜像，看是否拉取了gogs、 7.启动gogs镜像1234567docker run -d --name=mygogs -p 10022:22 -p 10080:3000 -v /var/gogs:/data gogs/gogs # 启动gogs容器,使用镜像gogs/gogs以后台模式启动一个容器,将容器的3000端口映射到主机的10080端口,主机的目录/var/gogs映射到容器的/data。// 下面几个命令用来查看容器进程，可以忽略docker ps -a # 查看容器进程, 加上参数-a,表示查看所有进程，包括已经退出的docker stop a01d66f87d71 # 停止id为a01d66f87d71的容器docker rm a01d66f87d71 # 移除id为a01d66f87d71的容器 8.首次配置启动完成后，在浏览器中访问：http://ip:10080ps:为什么访问10080，是因为gogs的默认端口是3000，docker启动gogs容器时，将容器的3000端口映射到主机的10080端口，所以访问服务器的10080端口，也就是访问容器的3000端口！ 第一次访问Gogs，浏览器进入安装页面，如图所示填写字段然后就ok了，全部结束了，愉快的使用gogs吧。其中有些命令是我自己记下来熟悉的，可以忽略。附上一张效果图： 手动搭建方式安装gogs传送门：庆爷搭建gogs的心酸历程 安装过程遇到的坑1.阿里云服务器做了端口限制，远程连接数据库或者访问gogs时，需要放开相应的端口，否则会出现连不上的情况； 本教程中:gogs -&gt; 10080,mysql -&gt; 3306。所以阿里云安全组里面应该放开这两个端口。如下图： 2.gogs第一个注册的用户即为管理员，我搭好后，忘了密码，然后想的是，直接注册一个新的账号，通过修改数据库的方式，将管理员账号的password替换为新注册的用户密码；多次实验，结果发现登录不了，原来gogs在进行用户注册时，不是直接将输入的密码拿来进行加密，应该是将输入的密码（a）+其他值，如用户名等(b) = 得到一个全新的字符串(c)，再将c进行的加密！还是自己太年轻！当然，如果你确实忘记了管理员密码，你可以操作数据库，删除user表中id=1的那条数据，将重新注册的那个账号的id设置为1，则这个账号即为管理员账号。 3.还有一点，ubuntu 设置远程访问数据库，除了开放3306端口，给用户授权，还需要修改mysql配置文件。找到mysql的这个配置文件：/etc/mysql/mysql.conf.d/mysqld.cnf 用管理员权限编辑这个文件：1sudo vim /etc/mysql/mysql.conf.d/mysqld.cnf 往下面翻，在bind-address = 127.0.0.1这一行前面添加#，将其注释掉。ok，原来mysql自己配置了本地的地址。注释按esc，输入:wq保存，重启MySQL服务：1service mysql restart 或者：12service mysql stopservice mysql start 4.可能你会去修改gogs的配置文件docker安装gogs完成后，Gogs配置文件位置（/var/gogs/gogs/conf/app.ini） 我的Gogsurl:http://59.110.155.32:10080/测试用户：12用户名：gg密码：123456 总结在这次搭建gogs的过程中，对docker又有了更加深入的了解，即便只有那么一点点。感谢那些技术大神！感谢世界和平！ 查阅资料Docker - 访问容器Docker 方式安装Gogs]]></content>
      <categories>
        <category>日常杂记</category>
      </categories>
      <tags>
        <tag>gogs</tag>
        <tag>docker</tag>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[小白之快速搭建svn教程]]></title>
    <url>%2F2018%2F02%2F16%2F%E5%B0%8F%E7%99%BD%E4%B9%8B%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BAsvn%E6%95%99%E7%A8%8B%2F</url>
    <content type="text"><![CDATA[前言 作为一名技术男，总是去网上买vpn账号来翻墙，还是会有些脸红。我也是小白一枚，刚开始也是使用一些网站提供的免费vpn账号来翻墙（网上账号太贵）。后面在了解了翻墙的原理之后，打算自己搭建vpn 准备 自行了解vps的概念以及作用; 购买一个国外vps 开始步骤1. 购买一个国外vps！要求预装linux系统，同时拿到服务器的主机，用户名，密码。例如：123主机：155.94.235.113用户名：root密码：xddf12343 &gt; 下面列出几个博主目前用过性价比较高（其实就是便宜）的国外的vps，下行速度有点慢（毕竟便宜）： 1.https://virmach.com/ 2.http://www.vpsdx.com/3964.html 注意：国外vpn最好选择洛杉矶的，速度应该是最快的。 步骤2. 连接服务器 这里博主使用的是Xbrowser 5工具，安装及使用方法自行百度 使用界面截图： 步骤3. 安装shadowsocks，配置账号 A.具体安装方法请参考：https://github.com/shadowsocks/shadowsocks-libev B.配置：参考https://github.com/shadowsocks/shadowsocks/wiki/Configuration-via-Config-File C.启动，参考：https://github.com/shadowsocks/shadowsocks/wiki/Shadowsocks-%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E 步骤4. 使用ss或ssr客户端翻墙 先下载客户端：https://github.com/shadowsocks/shadowsocks-windows/releases 配置账号 运行客户端，访问google 总结附上免费的vpn翻墙网站 1.免费ss账号 - ishadow 2.吾爱ss 注意：上面两个网站，第一个有很详细的教程，如何使用这里就不提了！第二个网站需要先注册一个账号，然后每天可领取流量，使用网站提供的免费节点。 End]]></content>
      <categories>
        <category>兴趣爱好</category>
      </categories>
      <tags>
        <tag>svn</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[初识Hexo+Next]]></title>
    <url>%2F2018%2F01%2F17%2F%E5%88%9D%E8%AF%86Hexo-Next%2F</url>
    <content type="text"><![CDATA[前言本篇博客主要用来记录我个人在搭建该博客时，查询资料过程中得到的一些总结，以及阅读过的一些有价值的文章！让一些从未搭建过博客的同学，可以花费更少的时间去搭建属于你的博客。 Hexo是什么？ Hexo 是一个快速、简洁且高效的博客框架。我个人理解，可以把他当作一个已经完成的项目来看待，而我们用Hexo搭建属于我们的博客，仅仅需要先把这个项目拉到我们本地电脑，根据官方文档进行一番配置（这里配置的前提是博客主题已经选好的情况下），然后部署到github上面，配上域名，则可以通过域名去访问。 详见Hexo官方文档：https://hexo.io/zh-cn/docs/ Next是什么？一种很简洁，目前很流行，使用文档非常详细的博客主题。 详见知乎解答：https://www.zhihu.com/question/24422335 快速搭建属于你的博客网上使用Hexo + Next搭建博客的教程很多；就不从头重新写了。 贴上一篇我搭建博客参考的文章，这篇文章的作者已经写的很详细了；新手可以参考：https://www.jianshu.com/p/f66103553c45 注意:安装Nodejs后，记得使用淘宝镜像 123456# 查看是否npm安装成功$ npm -v# 使用淘宝镜像$ npm install -g cnpm --registry=https://registry.npm.taobao.org# 查看cnpm是否安装成功$ cnpm -v 以上命令正常执行,就可以优雅的使用cnpm代替npm安装主题了（速度会快很多）。 Hexo常用命令12345678# 清除缓存文件 (db.json) 和已生成的静态文件 (public)$ hexo clean# 生成静态文件 (部署)$ hexo generate -&gt; $ hexo g (命令简写形式)# 启动服务器$ hexo serve# 发布到git上$ hexo deploy -&gt; $ hexo d (命令简写形式) 注意：以上命令都是在站点根目录下面运行！ 其他详细命令见官方文档：https://hexo.io/zh-cn/docs/commands.html 优秀博客： http://www.cduyzh.com/ http://shenzekun.cn/ https://appkfz.com/ http://visugar.com/ 参考文章 https://segmentfault.com/a/1190000009544924 https://jiaqiangbandongg.github.io/2017/07/29/Hexo-NexT-%E6%B7%BB%E5%8A%A0%E5%B0%8F%E5%8A%9F%E8%83%BD/]]></content>
      <categories>
        <category>兴趣爱好</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[我的博客]]></title>
    <url>%2F2017%2F12%2F30%2F%E6%88%91%E7%9A%84%E5%8D%9A%E5%AE%A2%2F</url>
    <content type="text"></content>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2017%2F12%2F30%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
</search>
